import db from '../utils/db.js';
import bcrypt from 'bcrypt';

const tableCreationScripts = [
  // Drop tables in reverse order to avoid foreign key errors.
  'DROP TABLE attendances CASCADE CONSTRAINTS',
  'DROP TABLE users CASCADE CONSTRAINTS',
  'DROP TABLE roles CASCADE CONSTRAINTS',

  // Create the ROLES table
  `CREATE TABLE roles (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    rolename VARCHAR2(50 BYTE) NOT NULL,
    CONSTRAINT roles_pk PRIMARY KEY (id)
  )`,

  // Create the USERS table with a foreign key to roles
  `CREATE TABLE users (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    name VARCHAR2(50 BYTE) NOT NULL,
    username VARCHAR2(20 BYTE) NOT NULL UNIQUE,
    email VARCHAR2(40 BYTE) NOT NULL UNIQUE,
    password VARCHAR2(100 BYTE) NOT NULL,
    role_id NUMBER NOT NULL,
    refresh_token VARCHAR2(400 BYTE),
    CONSTRAINT users_pk PRIMARY KEY (id),
    CONSTRAINT fk_role_id
      FOREIGN KEY (role_id)
      REFERENCES roles(id)
  )`,

  // Create the ATTENDANCES table with a foreign key to users
  `CREATE TABLE attendances (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    user_id NUMBER NOT NULL,
    clockin_date VARCHAR2(30 BYTE) NOT NULL,
    clockout_date VARCHAR2(30 BYTE),
    clockout_image_proof VARCHAR2(200 BYTE),
    clockin_image_proof VARCHAR2(200 BYTE) NOT NULL,
    CONSTRAINT attendances_pk PRIMARY KEY (id),
    CONSTRAINT fk_user_id
      FOREIGN KEY (user_id)
      REFERENCES users(id)
  )`
];

/**
 * Main asynchronous function to handle the entire database setup process.
 */
async function setupDatabase() {
  try {
    // 1. Initialize the database connection pool
    console.log('1. Initializing database connection...');
    await db.initializeDb();
    console.log('Database connection initialized!');

    // 2. Create all tables
    console.log('\n2. Creating tables...');
    for (const sql of tableCreationScripts) {
      console.log(`Executing: ${sql}`);
      try {
        await db.execute(sql);
        console.log('Success!');
      } catch (error) {
        console.error(`Failed to execute script. Error: ${error.message}`);
      }
    }
    console.log('  All table creation scripts executed.');

    // 3. Create initial role 'HR'
    console.log('\n3. Creating Role "HR"...');
    await db.execute(`INSERT INTO roles (rolename) VALUES (:rolename)`, { rolename: "HR"});
    console.log('Role "HR" created successfully!');

    // 4. Create initial user for 'HR'
    console.log('\n4. Creating User "hr1"...');
    const initialPassword = 'admin123';
    const hashedPassword = await bcrypt.hash(initialPassword, 10);
    
    // Find the ID of the 'HR' role
    const foundRole = await db.execute("SELECT id FROM roles WHERE rolename = 'HR'");
    const roleHRid = foundRole.rows[0].ID;

    // Execute query
    await db.execute(`
      INSERT INTO users (name, username, email, password, role_id)
      VALUES (:name, :username, :email, :password, :role_id)
    `, {
      name: "Human Resources 1",
      username: "hr1",
      email: "hr1@gmail.com",
      password: hashedPassword,
      role_id: roleHRid
    });
    console.log('User "hr1" created successfully!');

    console.log('\nAll database setup steps are complete!');

  } catch (error) {
    console.error('An unrecoverable error occurred during database setup:', error);
  } finally {
    // 5. Close the database connection pool
    await db.closeDb();
    console.log('Database connection pool closed. Script finished.');
  }
}

// Call the main function to start the process
setupDatabase();
